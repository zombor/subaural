package media

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"net/http"

	kitlog "github.com/go-kit/kit/log"
	"github.com/go-kit/kit/transport"
	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
)

func GetAvatar(logger kitlog.Logger) http.Handler {
	opts := []kithttp.ServerOption{
		kithttp.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
		kithttp.ServerErrorEncoder(encodeError),
	}

	getAvatar := kithttp.NewServer(
		func(ctx context.Context, request interface{}) (interface{}, error) {
			bytes, err := base64.StdEncoding.DecodeString(``)

			return bytes, err
		},
		func(_ context.Context, r *http.Request) (interface{}, error) { return nil, nil },
		encodePngResponse,
		opts...,
	)

	r := mux.NewRouter()

	r.Handle("/rest/getAvatar.view", getAvatar).Methods("GET")

	return r
}

func Stream(logger kitlog.Logger) http.Handler {
	opts := []kithttp.ServerOption{
		kithttp.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
		kithttp.ServerErrorEncoder(encodeError),
	}

	getAvatar := kithttp.NewServer(
		makeStreamEndpoint(),
		decodeStreamRequest,
		encodeStreamResponse,
		opts...,
	)

	r := mux.NewRouter()

	r.Handle("/rest/stream.view", getAvatar).Methods("GET")

	return r
}

type streamRequest struct {
	ID string
}

type streamResponse struct {
	Data []byte
	Err  error
}

func decodeStreamRequest(_ context.Context, r *http.Request) (interface{}, error) {
	query := r.URL.Query()
	id, ok := query["id"]
	if !ok {
		return nil, errors.New("missing id")
	}
	return streamRequest{ID: id[0]}, nil
}

func encodeError(_ context.Context, err error, w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	switch err {
	/*
		case cargo.ErrUnknown:
			w.WriteHeader(http.StatusNotFound)
		case ErrInvalidArgument:
			w.WriteHeader(http.StatusBadRequest)
	*/
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}
	json.NewEncoder(w).Encode(map[string]interface{}{
		"error": err.Error(),
	})
}

func encodePngResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	if e, ok := response.(errorer); ok && e.error() != nil {
		encodeError(ctx, e.error(), w)
		return nil
	}
	w.Header().Set("Content-Type", "image/png")
	_, err := w.Write(response.([]byte))

	return err
}

func encodeStreamResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	if e, ok := response.(errorer); ok && e.error() != nil {
		encodeError(ctx, e.error(), w)
		return nil
	}
	w.Header().Set("Content-Type", "audio/x-flac")
	_, err := w.Write(response.(streamResponse).Data)

	return err
}

type errorer interface {
	error() error
}
